"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import environ
from pathlib import ( Path, )
from datetime import ( timedelta, )   

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables using the 'environ' package
nekon = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(BASE_DIR.parent / '.nekon')  # Load environment variables from .nekon file

"""
Quick-start development settings - unsuitable for production
See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

SECURITY WARNING: keep the secret key used in production secret!
SECURITY WARNING: don't run with debug turned on in production!

Retrieve the secret key and debug mode from environment variables
"""
SECRET_KEY = nekon('SECRET_KEY')
DEBUG = nekon('DEBUG')

# Define allowed hosts for the Django project --> https://docs.djangoproject.com/en/5.1/ref/settings/#allowed-hosts
ALLOWED_HOSTS = ['*', 'http://localhost:3000']

# Installed applications, including Django's default apps plus second and third party apps for API handling, CORS
INSTALLED_APPS = [
    'django.contrib.admin',                          # Admin panel
    'django.contrib.auth',                           # Authentication system
    'django.contrib.contenttypes',                   # Content types framework
    'django.contrib.sessions',                       # Session management
    'django.contrib.messages',                       # Messaging framework
    'django.contrib.staticfiles',                    # Static files handling
    'accounts',                                      # Custom user accounts app
    'rest_framework',                                # Django REST Framework (DRF)
    'rest_framework.authtoken',                      # Token authentication in DRF
    'rest_framework_simplejwt.token_blacklist',      # JWT token blacklist support
    'corsheaders',                                   # CORS headers support
    'rest_framework_simplejwt',                      # Simple JWT for token-based authentication
    'oauth2_provider',                               # OAuth2 provider
]

# Configuration for Django REST Framework (DRF)
REST_FRAMEWORK = {
    'NON_FIELD_ERRORS_KEY':'error',  # Key for non-field errors in serializer responses
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT authentication
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication', # OAuth2 authentication
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',  # Restrict permissions to admin users by default
    ],
}

# JWT (JSON Web Token) settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),  # Access token lifespan
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),     # Refresh token lifespan
    "AUTH_HEADER_TYPES": ("Bearer",),                # Authorization header type
}

# Middleware configuration, which defines how requests and responses are processed
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',                    # Security features
    'django.contrib.sessions.middleware.SessionMiddleware',              # Session management
    'django.middleware.common.CommonMiddleware',                         # Common middleware for managing requests
    'django.middleware.csrf.CsrfViewMiddleware',                         # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',           # Authentication handling
    'django.contrib.messages.middleware.MessageMiddleware',              # Message framework
    'django.middleware.clickjacking.XFrameOptionsMiddleware',            # Protect against clickjacking
    "corsheaders.middleware.CorsMiddleware",                             # CORS handling
    "django.middleware.common.CommonMiddleware",                         # Common middleware (added again for redundancy)
]

# URL configuration for the project
ROOT_URLCONF = 'backend.urls'

# Template engine settings for rendering HTML templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Django's template engine
        'DIRS': [],                                                    # Template directories (empty here)
        'APP_DIRS': True,                                              # Enable app directories for templates
        'OPTIONS': {
            'context_processors': [                                    # Context processors for templates
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Web Server Gateway Interface (WSGI) application for deploying the project --> https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
WSGI_APPLICATION = 'backend.wsgi.application'

# Development: Default SQLite database configuration --> https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',         # Database engine
        'NAME': BASE_DIR / 'db.sqlite3',                # Database name/path
    }
}

# Production: Uncomment the configuration below to use AWS RDS PostgreSQL database. Make sure to comment out the above used SQLite database configuration.
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': nekon('RDS_DBNAME'),
        'USER': nekon('RDS_USER'),
        'PASSWORD': nekon('RDS_PASSWORD'),
        'HOST': nekon('RDS_HOST'),
        'PORT': nekon('RDS_PORT')
    }
}
"""

# Validators for password strength and security --> https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Prevent passwords similar to attributes
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',            # Enforce a minimum password length
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',           # Prevent commonly used passwords
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',          # Prevent fully numeric passwords
    },
]

# Localization settings --> https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'  # Default language
TIME_ZONE = 'UTC'        # Default time zone
USE_I18N = True          # Enable internationalization
USE_TZ = True            # Enable timezone support

# Static files (CSS, JavaScript, Images) --> https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = 'static/'

# Auto field for primary keys --> https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model used in the project
AUTH_USER_MODEL = 'accounts.User'

# OAuth credentials for GitHub and Google
GITHUB_CLIENT_ID = nekon('GITHUB_CLIENT_ID')
GITHUB_CLIENT_SECRET = nekon('GITHUB_CLIENT_SECRET')
GOOGLE_CLIENT_ID = nekon('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = nekon('GOOGLE_CLIENT_SECRET')

# Email settings
EMAIL_HOST = nekon('EMAIL_HOST')
EMAIL_HOST_USER = nekon('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = nekon('EMAIL_HOST_PASSWORD')
EMAIL_PORT = nekon('EMAIL_PORT')
DEFAULT_FROM_EMAIL = nekon('DEFAULT_FROM_EMAIL')
EMAIL_USE_TLS = nekon('EMAIL_USE_TLS')

# Site-specific configuration
DOMAIN = 'localhost:3000'                   # Frontend domain
SITE_NAME = 'Nekon'  # Site name

# CORS (Cross-Origin Resource Sharing) settings
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins to make requests
CORS_ALLOW_CREDENTIALS = True  # Allow credentials to be included in cross-origin requests

# CSRF (Cross-Site Request Forgery) trusted origins --> https://docs.djangoproject.com/en/5.1/ref/settings/#csrf-trusted-origins
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",  # Frontend trusted origin
]

# Repeated URL configuration (likely redundant, remove one if necessary) --> https://docs.djangoproject.com/en/5.1/topics/http/urls/#how-django-processes-a-request
ROOT_URLCONF = 'backend.urls'

# Social authentication settings
SOCIAL_AUTH_PASSWORD=nekon('SOCIAL_AUTH_PASSWORD')